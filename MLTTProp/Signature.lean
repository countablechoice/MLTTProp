class Base (Con : Type 1) where
  Ty : Con ‚Üí Type 1
  Sub : Con ‚Üí Con -> Type 0
  Tm : ‚àÄ Œì : Con, Ty Œì ‚Üí Type 0

  /- Substitution calculus -/
  nil : Con
  snoc : ‚àÄ Œì : Con, Ty Œì ‚Üí Con
  subTy : ‚àÄ {Œì Œî}, Ty Œî ‚Üí Sub Œì Œî ‚Üí Ty Œì
  idSub : ‚àÄ Œì, Sub Œì Œì
  compSub : ‚àÄ {Œì Œò Œî}, Sub Œò Œî ‚Üí Sub Œì Œò ‚Üí Sub Œì Œî
  endSub : ‚àÄ {Œì}, Sub Œì nil
  snocSub : ‚àÄ {Œì Œî A} (Œ¥ : Sub Œì Œî), Tm Œì (subTy A Œ¥) ‚Üí Sub Œì (snoc Œî A)
  weaken : ‚àÄ {Œì Œî A}, Sub Œì (snoc Œî A) ‚Üí Sub Œì Œî
  subX : ‚àÄ {Œì Œî A} (Œ¥ : Sub Œì (snoc Œî A)), Tm Œì (subTy A (weaken Œ¥))
  subTm : ‚àÄ {Œì Œî A}, Tm Œî A ‚Üí ‚àÄ (Œ¥ : Sub Œì Œî), Tm Œì (subTy A Œ¥)
  subTyId : ‚àÄ {Œì A}, subTy A (idSub Œì) = A
  subTyComp : ‚àÄ {Œì Œò Œî} {Œ¥ : Sub Œò Œî} {ŒΩ : Sub Œì Œò} {A},
    subTy A (compSub Œ¥ ŒΩ) = (subTy (subTy A Œ¥) ŒΩ)
  /- :TODO: more rules -/

notation "‚àÖ" => Base.nil
notation "(" Œì ", x‚¶Ç" A ")" => Base.snoc Œì A
notation:1024 A:1024 "[" œÅ "]" => Base.subTy A œÅ
notation "(" œÅ ", x‚Ü¶ " t ")" => Base.snocSub œÅ t
notation:1024 t:1024 "[" œÅ "]" => Base.subTm t œÅ

def Base.subTyT {Con} [Base Con] {Œì:Con} {A} (B : Ty (snoc Œì A))
    (u : Tm _ A) : Ty Œì :=
  B[(idSub _, x‚Ü¶ Eq.symm (subTyId (A:=A)) ‚ñ∏ u)]

def Base.subTmT {Con} [Base Con] {Œì:Con} {A} {B : Ty (snoc Œì A)}
    (t : Tm _ B) (u : Tm _ A) : Tm Œì (subTyT B u) :=
  t[(idSub _, x‚Ü¶ Eq.symm (subTyId (A:=A)) ‚ñ∏ u)]

notation:1024 A:1024 "[x‚Ü¶ " u "]" => Base.subTyT A u
notation:1024 t:1024 "[x‚Ü¶ " u "]" => Base.subTmT t u

class PiType (Con : Type 1) [Base Con] where
  Pi : ‚àÄ {Œì : Con} (A : Base.Ty Œì), Base.Ty (Œì, x‚¶ÇA) ‚Üí Base.Ty Œì
  lambda : ‚àÄ {Œì A B}, Base.Tm (Œì, x‚¶ÇA) B ‚Üí Base.Tm Œì (Pi A B)
  apX : ‚àÄ {Œì A B},  Base.Tm Œì (Pi A B) ‚Üí Base.Tm (Œì, x‚¶ÇA) B 
  PiŒ≤ : ‚àÄ {Œì A B} (t : Base.Tm (Œì, x‚¶ÇA) B), apX (lambda t) = t
  PiŒ∑ : ‚àÄ {Œì A B} (t : Base.Tm Œì (Pi A B)), (lambda (apX t)) = t
  /- :TODO: more rules -/

class SigmaType (Con : Type 1) [Base Con] where
  Sigma : ‚àÄ {Œì : Con} A, Base.Ty (Œì, x‚¶ÇA) ‚Üí Base.Ty Œì
  pair : ‚àÄ {Œì A B} (u:Base.Tm Œì A),
         Base.Tm Œì B[x‚Ü¶ u] ‚Üí
         Base.Tm Œì (Sigma A B)
  proj‚ÇÄ : ‚àÄ {Œì A B}, Base.Tm Œì (Sigma A B) ‚Üí Base.Tm Œì A 
  proj‚ÇÅ : ‚àÄ {Œì A B} (t : Base.Tm Œì (Sigma A B)),
          Base.Tm Œì B[x‚Ü¶ proj‚ÇÄ t] 
  SigmaŒ≤‚ÇÄ : ‚àÄ {Œì A} {B : Base.Ty (Œì, x‚¶ÇA)} (u : Base.Tm Œì A)
            (v : Base.Tm Œì B[x‚Ü¶ u]),
            proj‚ÇÄ (pair u v) = u
  SigmaŒ≤‚ÇÅ : ‚àÄ {Œì A} {B : Base.Ty (Œì, x‚¶ÇA)} (u : Base.Tm Œì A)
            (v : Base.Tm Œì B[x‚Ü¶ u]),
            SigmaŒ≤‚ÇÄ u v ‚ñ∏ proj‚ÇÅ (pair u v) = v
  SigmaŒ∑ : ‚àÄ {Œì A B} (t : Base.Tm Œì (Sigma A B)), (pair (proj‚ÇÄ t) (proj‚ÇÅ t)) = t
  /- :TODO: more rules -/

class BoolType (Con : Type 1) [Base Con] where
  ùîπ : ‚àÄ {Œì : Con}, Base.Ty Œì
  tt : ‚àÄ {Œì : Con}, Base.Tm Œì ùîπ
  ff : ‚àÄ {Œì : Con}, Base.Tm Œì ùîπ
  ifThenElse : ‚àÄ {Œì : Con} {C : Base.Ty (Œì, x‚¶Çùîπ)} (t : Base.Tm Œì ùîπ),
    Base.Tm Œì C[x‚Ü¶ tt] ‚Üí
    Base.Tm Œì C[x‚Ü¶ ff] ‚Üí
    Base.Tm Œì C[x‚Ü¶ t]
  BoolŒ≤tt : ‚àÄ {Œì} {C : Base.Ty (Œì, x‚¶Çùîπ)}
    (u : Base.Tm Œì C[x‚Ü¶ tt])
    (v : Base.Tm Œì C[x‚Ü¶ ff]),
    ifThenElse tt u v = u
  BoolŒ≤ff : ‚àÄ {Œì} {C : Base.Ty (Œì, x‚¶Çùîπ)}
    (u : Base.Tm Œì C[x‚Ü¶ tt])
    (v : Base.Tm Œì C[x‚Ü¶ ff]),
    ifThenElse ff u v = v
  /- :TODO: more rules -/

class PropType (Con : Type 1) [Base Con] where
  PROP : ‚àÄ {Œì : Con}, Base.Ty Œì
  elP : ‚àÄ {Œì}, Base.Tm Œì PROP ‚Üí Base.Ty Œì
  irr : ‚àÄ {Œì a} {u v : Base.Tm Œì (elP a)}, u = v
  subPROP : ‚àÄ {Œì Œî} {ŒΩ : Base.Sub Œì Œî}, PROP[ŒΩ] = PROP
  subElP : ‚àÄ {Œì Œî a} {ŒΩ : Base.Sub Œì Œî}, (elP a)[ŒΩ] = elP (subPROP ‚ñ∏ a[ŒΩ])

  piP : ‚àÄ {Œì} (A : Base.Ty Œì), Base.Tm (Œì, x‚¶Ç A) PROP ‚Üí Base.Tm Œì PROP
  lambdaP : ‚àÄ {Œì A b}, Base.Tm (Œì, x‚¶ÇA) (elP b) ‚Üí Base.Tm Œì (elP (piP A b))
  apXP : ‚àÄ {Œì A b},  Base.Tm Œì (elP (piP A b)) ‚Üí Base.Tm (Œì, x‚¶ÇA) (elP b) 

  sigmaP : ‚àÄ {Œì} (a : Base.Tm Œì PROP), Base.Tm (Œì, x‚¶ÇelP a) PROP ‚Üí Base.Tm Œì PROP
  pairP : ‚àÄ {Œì a} {b : Base.Tm (Œì, x‚¶ÇelP a) PROP} (u : Base.Tm Œì (elP a)),
          Base.Tm Œì (elP (subPROP ‚ñ∏ (b[x‚Ü¶ u]))) ‚Üí
          Base.Tm Œì (elP (sigmaP a b))
  proj‚ÇÄP : ‚àÄ {Œì a b}, Base.Tm Œì (elP (sigmaP a b)) ‚Üí Base.Tm Œì (elP a) 
  proj‚ÇÅP : ‚àÄ {Œì a b} (t : Base.Tm Œì (elP (sigmaP a b))),
           Base.Tm Œì (elP (subPROP ‚ñ∏ (b[x‚Ü¶ proj‚ÇÄP t])))

  top : ‚àÄ {Œì}, Base.Tm Œì PROP
  triv : ‚àÄ {Œì}, Base.Tm Œì (elP top)

  bottom : ‚àÄ {Œì}, Base.Tm Œì PROP
  exfalso : ‚àÄ {Œì} {C : Base.Ty Œì}, Base.Tm Œì (elP bottom) ‚Üí Base.Tm Œì C
  subBottom : ‚àÄ {Œì Œî} {ŒΩ : Base.Sub Œì Œî}, subPROP ‚ñ∏ bottom[ŒΩ] = bottom 
  /- :TODO: more rules -/

notation "‚ä§" => PropType.top
notation "‚ä•" => PropType.bottom

structure Sig where
  Con : Type 1
  base : Base Con 
  pi : PiType Con
  sigma: SigmaType Con
  bool : BoolType Con
  prop : PropType Con

attribute [instance] Sig.base
attribute [instance] Sig.pi
attribute [instance] Sig.sigma
attribute [instance] Sig.bool
attribute [instance] Sig.prop
instance : CoeSort Sig (Type 1) where
  coe sig := sig.Con

namespace Example

theorem substSubst {A} {a b c : A} (motive : A -> Type)
    (eq1 : a = b) (eq2 : b = c) (eq3 : a = c) (t : motive a) :
    eq2 ‚ñ∏ eq1 ‚ñ∏ t = eq3 ‚ñ∏ t := by
  revert eq2 eq3
  cases eq1
  simp

theorem substSubstRev {A} {a b : A} (motive : A -> Type)
    (eq1 : a = b) (eq2 : b = a) (t : motive a) :
    eq2 ‚ñ∏ eq1 ‚ñ∏ t = t := by
  rw [substSubst]
  rfl

variable {M : Sig}
open Base
open BoolType
open PropType

theorem degenerate (ttisff : tt (Œì:=(‚àÖ:M)) = ff) {Œì : M} {A} :
    Tm Œì A := by
  apply exfalso
  rw [‚Üê subBottom (ŒΩ := endSub)]
  rw [‚Üê subElP]
  apply subTm
  let subC (t : Tm (‚àÖ:M) ùîπ) : Sub (‚àÖ:M) (‚àÖ, x‚¶Çùîπ) :=
     (idSub _, x‚Ü¶ Eq.symm (subTyId (Œì:=(‚àÖ:M))) ‚ñ∏ t)
  let castC {t} : PROP[x‚Ü¶ t] = PROP := subPROP (ŒΩ := subC t)
  let revCastC {t} := Eq.symm (@castC t)
  have ffeq : ‚ä• = castC ‚ñ∏ ifThenElse ff (revCastC ‚ñ∏ ‚ä§) (revCastC ‚ñ∏ ‚ä•) := by
    rw [BoolŒ≤ff]
    rw [substSubstRev]
  rw [ffeq]
  apply (Eq.rec (motive := Œª (X : M.base.Tm ‚àÖ M.bool.ùîπ) _ =>
   (Tm (‚àÖ:M)
     (elP (castC ‚ñ∏ ifThenElse X (revCastC ‚ñ∏ ‚ä§) (revCastC ‚ñ∏ ‚ä•)))))
   _ ttisff)
  have tteq : ‚ä§ =
      castC ‚ñ∏ ifThenElse tt (revCastC ‚ñ∏ ‚ä§) (revCastC ‚ñ∏ ‚ä•) := by
    rw [BoolŒ≤tt]
    rw [substSubstRev]
  rw [‚Üê tteq]
  apply triv

end Example
