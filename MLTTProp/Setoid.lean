import ¬´MLTTProp¬ª.Signature

set_option pp.beta true

namespace Setoid

def Con := (U : Type) √ó Setoid U

structure Ty (Œì : Con) where
  U : Œì.1 ‚Üí Type
  r : ‚àÄ {Œ≥‚ÇÄ Œ≥‚ÇÅ}, Œì.2.r Œ≥‚ÇÄ Œ≥‚ÇÅ ‚Üí U Œ≥‚ÇÄ ‚Üí U Œ≥‚ÇÅ ‚Üí Prop
  reflR : ‚àÄ {Œ≥} (Œ± : U Œ≥), r (Œì.2.iseqv.refl Œ≥) Œ± Œ±
  symmR : ‚àÄ {Œ≥‚ÇÄ Œ≥‚ÇÅ Œ≥‚ÇÄ‚ÇÅ} {Œ±‚ÇÄ : U Œ≥‚ÇÄ} {Œ±‚ÇÅ : U Œ≥‚ÇÅ},
    r Œ≥‚ÇÄ‚ÇÅ Œ±‚ÇÄ Œ±‚ÇÅ ‚Üí r (Œì.2.iseqv.symm Œ≥‚ÇÄ‚ÇÅ) Œ±‚ÇÅ Œ±‚ÇÄ
  transR : ‚àÄ {Œ≥‚ÇÄ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÄ‚ÇÅ Œ≥‚ÇÅ‚ÇÇ} {Œ±‚ÇÄ : U Œ≥‚ÇÄ} {Œ±‚ÇÅ : U Œ≥‚ÇÅ} {Œ±‚ÇÇ : U Œ≥‚ÇÇ},
    r Œ≥‚ÇÄ‚ÇÅ Œ±‚ÇÄ Œ±‚ÇÅ ‚Üí r Œ≥‚ÇÅ‚ÇÇ Œ±‚ÇÅ Œ±‚ÇÇ ‚Üí r (Œì.2.iseqv.trans Œ≥‚ÇÄ‚ÇÅ Œ≥‚ÇÅ‚ÇÇ) Œ±‚ÇÄ Œ±‚ÇÇ
  coe : ‚àÄ {Œ≥‚ÇÄ Œ≥‚ÇÅ}, Œì.2.r Œ≥‚ÇÄ Œ≥‚ÇÅ ‚Üí U Œ≥‚ÇÄ ‚Üí U Œ≥‚ÇÅ
  coh : ‚àÄ {Œ≥‚ÇÄ Œ≥‚ÇÅ} (Œ≥‚ÇÄ‚ÇÅ : Œì.2.r Œ≥‚ÇÄ Œ≥‚ÇÅ) (Œ± : U Œ≥‚ÇÄ), r Œ≥‚ÇÄ‚ÇÅ Œ± (coe Œ≥‚ÇÄ‚ÇÅ Œ±)

namespace Ty

def coeRev (A : Ty Œì) (Œ≥‚ÇÄ‚ÇÅ : Œì.2.r Œ≥‚ÇÄ Œ≥‚ÇÅ) (t : A.U Œ≥‚ÇÅ) : A.U Œ≥‚ÇÄ :=
  A.coe (Œì.2.symm Œ≥‚ÇÄ‚ÇÅ) t

def cohRev (A : Ty Œì) (Œ≥‚ÇÄ‚ÇÅ : Œì.2.r Œ≥‚ÇÄ Œ≥‚ÇÅ) (t : A.U Œ≥‚ÇÅ) :
  A.r Œ≥‚ÇÄ‚ÇÅ (A.coeRev Œ≥‚ÇÄ‚ÇÅ t) t :=
  A.symmR (A.coh _ t)

end Ty

structure Subst (Œì Œî : Con) where
  F : Œì.1 ‚Üí Œî.1
  r : ‚àÄ {Œ≥‚ÇÄ Œ≥‚ÇÅ}, Œì.2.r Œ≥‚ÇÄ Œ≥‚ÇÅ ‚Üí Œî.2.r (F Œ≥‚ÇÄ) (F Œ≥‚ÇÅ)

structure Tm (Œì : _) (A : Ty Œì) where
  F : ‚àÄ Œ≥, A.U Œ≥ /- when doing PERs we will likely  need a Œ≥‚âàŒ≥ here -/
  r : ‚àÄ Œ≥‚ÇÄ‚ÇÅ, A.r Œ≥‚ÇÄ‚ÇÅ (F Œ≥‚ÇÄ) (F Œ≥‚ÇÅ)
  
instance base : Base Con where
  Ty := Ty
  Sub := Subst
  Tm := Tm
  nil := ‚ü®Unit, { r := Œª _ _ => True, iseqv := by constructor<;>(intros;constructor) }‚ü©
  snoc Œì A := ‚ü®(Œ≥ : Œì.1) √ó A.U Œ≥, {
     r := Œª Œ≥‚ÇÄ Œ≥‚ÇÅ => ‚àÉ Œ≥‚ÇÄ‚ÇÅ, A.r Œ≥‚ÇÄ‚ÇÅ Œ≥‚ÇÄ.2 Œ≥‚ÇÅ.2
     iseqv := by
       constructor
       ¬∑ intro ‚ü®Œ≥, _‚ü©
         exists Œì.2.iseqv.refl Œ≥
         apply A.reflR
       ¬∑ intro ‚ü®Œ≥‚ÇÄ, _‚ü© ‚ü®Œ≥‚ÇÅ, _‚ü© ‚ü®Œ≥‚ÇÄ‚ÇÅ, _‚ü©
         exists Œì.2.iseqv.symm Œ≥‚ÇÄ‚ÇÅ
         apply A.symmR<;>assumption
       ¬∑ intro ‚ü®Œ≥‚ÇÄ, _‚ü© ‚ü®Œ≥‚ÇÅ, _‚ü© ‚ü®Œ≥‚ÇÇ, _‚ü© ‚ü®Œ≥‚ÇÄ‚ÇÅ, _‚ü© ‚ü®Œ≥‚ÇÅ‚ÇÇ, _‚ü©
         exists Œì.2.iseqv.trans Œ≥‚ÇÄ‚ÇÅ Œ≥‚ÇÅ‚ÇÇ
         apply A.transR<;>assumption
   }‚ü©
  subTy A Œ¥ := {
    U := Œª Œ≥ => A.U (Œ¥.F Œ≥)
    r := Œª Œ≥‚ÇÄ‚ÇÅ Œ±‚ÇÄ Œ±‚ÇÅ => A.r (Œ¥.r Œ≥‚ÇÄ‚ÇÅ) Œ±‚ÇÄ Œ±‚ÇÅ
    reflR := by
      intros
      apply A.reflR
    symmR := by
      intros
      apply A.symmR;assumption
    transR := by
      intros
      apply A.transR<;>assumption
    coe := Œª Œ≥‚ÇÄ‚ÇÅ Œ± => A.coe (Œ¥.r Œ≥‚ÇÄ‚ÇÅ) Œ± 
    coh := by
      intros
      apply A.coh
  }
  idSub Œì := { F := id, r := id }
  compSub Œ¥ ŒΩ := { F := Œ¥.F ‚àò ŒΩ.F, r := Œ¥.r ‚àò ŒΩ.r }
  endSub := { F := Œª _ => (), r := by intros; constructor }
  snocSub Œ¥ t := {
    F := Œª Œ≥ => ‚ü®Œ¥.F Œ≥, t.F Œ≥‚ü© 
    r := by
      intros;simp
      constructor
      apply t.r; assumption
  }
  weaken Œ¥ := {
    F := Œª Œ≥ => (Œ¥.F Œ≥).1
    r := by
      intros _ _ a
      cases Œ¥.r a
      assumption
  }
  subX Œ¥ := {
    F := Œª Œ≥ => (Œ¥.F Œ≥).2
    r := by
      intros _ _ a
      cases Œ¥.r a
      assumption
  }
  subTm t Œ¥ := {
    F := Œª Œ≥ => t.F (Œ¥.F Œ≥)
    r := by
      intros
      apply t.r
  }
  subTyId := by intros; rfl
  subTyComp := by intros; rfl

instance pi : PiType Con where
  Pi {Œì} A B := {
    U := Œª Œ≥ => { f : ‚àÄ x : (A.U Œ≥), B.U ‚ü®Œ≥, x‚ü© //
           ‚àÄ x‚ÇÄ x‚ÇÅ (x‚ÇÄ‚ÇÅ : A.r (Œì.2.refl Œ≥) x‚ÇÄ x‚ÇÅ),
           B.r (Œ≥‚ÇÄ:=‚ü®Œ≥, _‚ü©) (Œ≥‚ÇÅ:=‚ü®Œ≥, _‚ü©) ‚ü®Œì.2.refl Œ≥, x‚ÇÄ‚ÇÅ‚ü© (f x‚ÇÄ) (f x‚ÇÅ) }
    r := Œª {Œ≥‚ÇÄ Œ≥‚ÇÅ} Œ≥‚ÇÄ‚ÇÅ t‚ÇÄ t‚ÇÅ => ‚àÄ x‚ÇÄ x‚ÇÅ (x‚ÇÄ‚ÇÅ : A.r Œ≥‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ),
           B.r (Œ≥‚ÇÄ:=‚ü®Œ≥‚ÇÄ, _‚ü©) (Œ≥‚ÇÅ:=‚ü®Œ≥‚ÇÅ, _‚ü©) ‚ü®Œ≥‚ÇÄ‚ÇÅ, x‚ÇÄ‚ÇÅ‚ü© (t‚ÇÄ.1 x‚ÇÄ) (t‚ÇÅ.1 x‚ÇÅ)
    reflR := by simp; intro _ ‚ü®_, _‚ü©; assumption
    symmR := by
      simp; intro _ _ _ ‚ü®f, Hf‚ü© ‚ü®g, Hg‚ü© t‚ÇÄ‚ÇÅ x‚ÇÅ x‚ÇÄ x‚ÇÅ‚ÇÄ
      simp at *
      apply B.symmR
      apply t‚ÇÄ‚ÇÅ
      apply A.symmR
      assumption
    transR := by
      simp; intro _ _ _ _ _ ‚ü®f, Hf‚ü© ‚ü®g, Hg‚ü© ‚ü®h, Hh‚ü© t‚ÇÄ‚ÇÅ t‚ÇÅ‚ÇÇ x‚ÇÄ x‚ÇÇ x‚ÇÄ‚ÇÇ
      simp at *
      apply B.transR
      ¬∑ apply t‚ÇÄ‚ÇÅ
        apply A.coh
      ¬∑ apply t‚ÇÅ‚ÇÇ
        apply A.transR
        ¬∑ apply A.symmR
          apply A.coh
        ¬∑ assumption
    coe := Œª {Œ≥‚ÇÄ Œ≥‚ÇÅ} Œ≥‚ÇÄ‚ÇÅ t => ‚ü®
      Œª x => B.coe (Œ≥‚ÇÄ:=‚ü®Œ≥‚ÇÄ, _‚ü©) ‚ü®Œ≥‚ÇÄ‚ÇÅ, A.cohRev Œ≥‚ÇÄ‚ÇÅ x‚ü©
                (t.1 (A.coeRev Œ≥‚ÇÄ‚ÇÅ x)),
      by
        intros _ _ x‚ÇÅ‚ÇÇ
        apply B.transR
        ¬∑ apply B.symmR
          apply B.coh
        ¬∑ apply (flip B.transR)
          ¬∑ apply B.coh
          ¬∑ apply t.2 
            apply A.transR
            ¬∑ apply A.cohRev
            ¬∑ apply A.transR
              ¬∑ apply x‚ÇÅ‚ÇÇ
              ¬∑ apply A.symmR
                apply A.cohRev
                assumption
            assumption

      ‚ü©
    coh := by
      simp; intro _ _ Œ≥‚ÇÄ‚ÇÅ ‚ü®f, Hf‚ü© _ _ x‚ÇÄ‚ÇÅ
      apply B.transR
      ¬∑ apply Hf
        apply (A.transR x‚ÇÄ‚ÇÅ)
        apply A.symmR
        apply (A.cohRev Œ≥‚ÇÄ‚ÇÅ)
      ¬∑ apply B.coh
  }
  lambda t := {
    F := Œª Œ≥ => ‚ü®Œª x => t.1 ‚ü®Œ≥, x‚ü©, 
      by intros; apply t.r ‚ü©
    r := by simp; intros; apply t.r
  }
  apX t := {
    F := Œª Œ≥x => (t.1 Œ≥x.1).1 Œ≥x.2
    r := by
      cases t
      simp at *
      rename_i f Hf
      intro ‚ü®Œ≥‚ÇÄ, x‚ÇÄ‚ü© ‚ü®Œ≥‚ÇÅ, x‚ÇÅ‚ü© ‚ü®Œ≥‚ÇÄ‚ÇÅ, x‚ÇÄ‚ÇÅ‚ü©
      simp at *
      apply (Hf Œ≥‚ÇÄ‚ÇÅ x‚ÇÄ x‚ÇÅ x‚ÇÄ‚ÇÅ)
  }
  PiŒ≤ := by intros; rfl
  PiŒ∑ := by intros; rfl

instance sigma : SigmaType Con where
  Sigma A B := {
    U := Œª Œ≥ => Œ£ x : (A.U Œ≥), B.U ‚ü®Œ≥, x‚ü©
    r := Œª {Œ≥‚ÇÄ Œ≥‚ÇÅ} Œ≥‚ÇÄ‚ÇÅ uv‚ÇÄ uv‚ÇÅ => ‚àÉ u‚ÇÄ‚ÇÅ : A.r Œ≥‚ÇÄ‚ÇÅ uv‚ÇÄ.1 uv‚ÇÅ.1,
      B.r (Œ≥‚ÇÄ:=‚ü®Œ≥‚ÇÄ, _‚ü©) (Œ≥‚ÇÅ:=‚ü®Œ≥‚ÇÅ, _‚ü©) ‚ü®Œ≥‚ÇÄ‚ÇÅ, u‚ÇÄ‚ÇÅ‚ü© uv‚ÇÄ.2 uv‚ÇÅ.2
    reflR := by
      intro _ ‚ü®u, v‚ü©
      exists (A.reflR u)
      apply B.reflR
    symmR := by
      intro _ _ _ ‚ü®_, _‚ü© ‚ü®_, _‚ü© ‚ü®u‚ÇÄ‚ÇÅ, v‚ÇÄ‚ÇÅ‚ü©
      exists (A.symmR u‚ÇÄ‚ÇÅ)
      apply B.symmR;assumption
    transR := by
      intro _ _ _ _ _ ‚ü®_, _‚ü© ‚ü®_, _‚ü© ‚ü®_, _‚ü© ‚ü®u‚ÇÄ‚ÇÅ, v‚ÇÄ‚ÇÅ‚ü© ‚ü®u‚ÇÅ‚ÇÇ, v‚ÇÅ‚ÇÇ‚ü©
      exists (A.transR u‚ÇÄ‚ÇÅ u‚ÇÅ‚ÇÇ)
      apply B.transR<;>assumption
    coe := Œª {Œ≥‚ÇÄ Œ≥‚ÇÅ} Œ≥‚ÇÄ‚ÇÅ t => ‚ü®A.coe Œ≥‚ÇÄ‚ÇÅ t.1,
      B.coe (Œ≥‚ÇÄ:=‚ü®Œ≥‚ÇÄ, _‚ü©) ‚ü®Œ≥‚ÇÄ‚ÇÅ, A.coh Œ≥‚ÇÄ‚ÇÅ t.1‚ü© t.2‚ü©
    coh := by
      simp
      intro Œ≥‚ÇÄ Œ≥‚ÇÅ Œ≥‚ÇÄ‚ÇÅ ‚ü®u, v‚ü©
      exists (A.coh Œ≥‚ÇÄ‚ÇÅ u)
      apply (B.coh (Œ≥‚ÇÄ:=‚ü®Œ≥‚ÇÄ, _‚ü©) (Œ≥‚ÇÅ:=‚ü®Œ≥‚ÇÅ, _‚ü©) ‚ü®Œ≥‚ÇÄ‚ÇÅ, A.coh _ u‚ü© v)
  }
  pair u v := {
    F := Œª Œ≥ => ‚ü®u.1 Œ≥, v.1 Œ≥‚ü©
    r := Œª Œ≥‚ÇÄ‚ÇÅ => ‚ü®u.r Œ≥‚ÇÄ‚ÇÅ, v.r Œ≥‚ÇÄ‚ÇÅ‚ü©
  }
  proj‚ÇÄ t := {
    F := Œª Œ≥ => (t.1 Œ≥).1
    r := Œª Œ≥‚ÇÄ‚ÇÅ => (t.r Œ≥‚ÇÄ‚ÇÅ).1
  }
  proj‚ÇÅ {Œì A B} t := {
    F := Œª Œ≥ => (t.1 Œ≥).2
    r := Œª Œ≥‚ÇÄ‚ÇÅ => (t.r Œ≥‚ÇÄ‚ÇÅ).2
  }
  SigmaŒ≤‚ÇÄ := by intros; rfl
  SigmaŒ≤‚ÇÅ := by intros; rfl
  SigmaŒ∑ := by intros; rfl

def ùîπ {Œì} : Ty Œì := {
  U := Œª _ => Bool
  r := Œª _ t‚ÇÄ t‚ÇÅ => 
    match t‚ÇÄ, t‚ÇÅ with
    | true, true => True
    | false, false => True
    | _, _ => False
  reflR := by intro _ t;cases t<;>constructor
  symmR := by intros _ _ _ t‚ÇÄ t‚ÇÅ _;cases t‚ÇÄ<;>cases t‚ÇÅ<;>
    first | contradiction | constructor
  transR := by
    intro _ _ _ _ _ t‚ÇÄ t‚ÇÅ t‚ÇÇ _ _
    cases t‚ÇÄ<;>cases t‚ÇÅ<;>cases t‚ÇÇ<;>
    first | contradiction | constructor
  coe := Œª _ t => t
  coh := by
    intros
    rename_i t
    simp
    cases t<;>constructor
}

instance bool : BoolType Con where
  ùîπ := ùîπ
  tt := {
    F := Œª _ => true
    r := by intros; constructor
  }
  ff := {
    F := Œª _ => false
    r := by intros; constructor
  }
  ifThenElse {Œì C} t u v := {
    F := Œª Œ≥ => @Bool.casesOn (Œª b => C.U ‚ü®Œ≥, b‚ü©) (t.F Œ≥) (v.F Œ≥) (u.F Œ≥) 
    r := by
      intro Œ≥‚ÇÄ Œ≥‚ÇÅ Œ≥‚ÇÄ‚ÇÅ
      generalize t.r Œ≥‚ÇÄ‚ÇÅ = t‚ÇÄ‚ÇÅ
      revert t‚ÇÄ‚ÇÅ
      show (‚àÄ t‚ÇÄ‚ÇÅ, C.r ‚ü®_, t‚ÇÄ‚ÇÅ‚ü©
        (@Bool.casesOn (Œª b => C.U ‚ü®Œ≥‚ÇÄ, b‚ü©) (t.1 Œ≥‚ÇÄ) (Tm.F v Œ≥‚ÇÄ) (Tm.F u Œ≥‚ÇÄ))
        (@Bool.casesOn (Œª b => C.U ‚ü®Œ≥‚ÇÅ, b‚ü©) (t.1 Œ≥‚ÇÅ) (Tm.F v Œ≥‚ÇÅ) (Tm.F u Œ≥‚ÇÅ)))
      cases t.1 Œ≥‚ÇÄ<;>cases t.1 Œ≥‚ÇÅ<;>intros<;>try { contradiction }
      ¬∑ apply v.r; assumption
      ¬∑ apply u.r; assumption
  }
  BoolŒ≤tt := by intros; rfl
  BoolŒ≤ff := by intros; rfl

instance prop : PropType Con where
  PROP := {
    U := Œª _ => Prop
    r := Œª _ A B => A ‚Üî B
    reflR := Œª _ => ‚ü®id, id‚ü©
    symmR := Œª ‚ü®x‚ÇÄ, x‚ÇÅ‚ü© => ‚ü®x‚ÇÅ, x‚ÇÄ‚ü©
    transR := Œª ‚ü®x‚ÇÄ, x‚ÇÅ‚ü© ‚ü®y‚ÇÄ, y‚ÇÅ‚ü© => ‚ü®y‚ÇÄ ‚àò x‚ÇÄ, x‚ÇÅ ‚àò y‚ÇÅ‚ü©
    coe := Œª _ x => x
    coh := Œª _ _ => ‚ü®id, id‚ü©
  }
  elP a := {
    U := Œª Œ≥ => PLift (a.1 Œ≥)
    r := Œª _ _ _ => True
    reflR := Œª _ => ‚ü®‚ü©
    symmR := Œª _ => ‚ü®‚ü©
    transR := Œª _ _ => ‚ü®‚ü©
    coe := Œª Œ≥‚ÇÄ‚ÇÅ ‚ü®x‚ü© => ‚ü®(a.r Œ≥‚ÇÄ‚ÇÅ).1 x‚ü©
    coh := Œª _ _ => ‚ü®‚ü©
  }
  irr := by 
    intros _ _ _ v
    show ‚ü®Œª Œ≥ => ‚ü®(v.F Œ≥).1‚ü©, v.r‚ü© = v
    rfl
  subPROP := by intros; rfl
  subElP := by intros; rfl
  piP A b := {
    F := Œª Œ≥ => ‚àÄ x : (A.1 Œ≥), b.1 ‚ü®Œ≥, x‚ü©
    r := Œª {Œ≥‚ÇÄ Œ≥‚ÇÅ} Œ≥‚ÇÄ‚ÇÅ => ‚ü®
      Œª f x => (b.r (Œ≥‚ÇÄ:=‚ü®Œ≥‚ÇÄ,_‚ü©) (Œ≥‚ÇÅ:=‚ü®Œ≥‚ÇÅ,_‚ü©)
        ‚ü®Œ≥‚ÇÄ‚ÇÅ, A.cohRev Œ≥‚ÇÄ‚ÇÅ x‚ü©).1 (f (A.coeRev Œ≥‚ÇÄ‚ÇÅ x)),
      Œª f x => (b.r (Œ≥‚ÇÄ:=‚ü®Œ≥‚ÇÄ,_‚ü©) (Œ≥‚ÇÅ:=‚ü®Œ≥‚ÇÅ,_‚ü©)
        ‚ü®Œ≥‚ÇÄ‚ÇÅ, A.coh Œ≥‚ÇÄ‚ÇÅ x‚ü©).2 (f (A.coe Œ≥‚ÇÄ‚ÇÅ x))
      ‚ü©
  }
  lambdaP t := {
    F := Œª Œ≥ => PLift.up (Œª x => (t.1 ‚ü®Œ≥, x‚ü©).down)
    r := by intros; trivial
  }
  apXP t := {
    F := Œª ‚ü®Œ≥, x‚ü© => PLift.up ((t.1 Œ≥).down x)
    r := by intros; trivial
  }
  sigmaP a b := {
    F := Œª Œ≥ => ‚àÉ x : (a.1 Œ≥), b.1 ‚ü®Œ≥, PLift.up x‚ü©
    r := Œª {Œ≥‚ÇÄ Œ≥‚ÇÅ} Œ≥‚ÇÄ‚ÇÅ => ‚ü®
      Œª ‚ü®x, y‚ü© => ‚ü®(a.r Œ≥‚ÇÄ‚ÇÅ).1 x,
        ((b.r (Œ≥‚ÇÄ:=‚ü®Œ≥‚ÇÄ,_‚ü©) (Œ≥‚ÇÅ:=‚ü®Œ≥‚ÇÅ,_‚ü©) ‚ü®Œ≥‚ÇÄ‚ÇÅ, True.intro‚ü©).1 y)‚ü©,
      Œª ‚ü®x, y‚ü© => ‚ü®(a.r Œ≥‚ÇÄ‚ÇÅ).2 x,
        ((b.r (Œ≥‚ÇÄ:=‚ü®Œ≥‚ÇÄ,_‚ü©) (Œ≥‚ÇÅ:=‚ü®Œ≥‚ÇÅ,_‚ü©) ‚ü®Œ≥‚ÇÄ‚ÇÅ, True.intro‚ü©).2 y)‚ü©,
      ‚ü©
  }
  pairP u v := {
    F := Œª Œ≥ => ‚ü®(u.1 Œ≥).down, (v.1 Œ≥).down‚ü©
    r := by intros; trivial
  }
  proj‚ÇÄP t := {
    F := Œª Œ≥ => PLift.up (t.1 Œ≥).down.1
    r := by intros; trivial
  }
  proj‚ÇÅP t := {
    F := Œª Œ≥ => PLift.up (t.1 Œ≥).down.2
    r := by intros; trivial
  }
  top := {
    F := Œª _ => True
    r := Œª _ => ‚ü®id, id‚ü©
  }
  triv := {
    F := Œª _ => PLift.up True.intro
    r := by intros; trivial
  }
  bottom := {
    F := Œª _ => False
    r := Œª _ => ‚ü®id, id‚ü©
  }
  exfalso t := {
    F := Œª Œ≥ => False.elim (t.1 Œ≥).down
    r := by
      intro Œ≥‚ÇÄ _ _
      let X := (t.1 Œ≥‚ÇÄ).down
      cases X
  }
  subBottom := by intros; rfl

end Setoid

def SetoidModel : Sig where
  Con := Setoid.Con
  base := Setoid.base
  pi := Setoid.pi
  sigma := Setoid.sigma
  bool := Setoid.bool
  prop := Setoid.prop

#print axioms SetoidModel
