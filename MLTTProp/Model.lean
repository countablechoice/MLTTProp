import ¬´MLTTProp¬ª.Signature

namespace Model

instance base : Base Type where
  Ty Œì := Œì ‚Üí Type
  Sub Œì Œî := Œì ‚Üí Œî
  Tm Œì A := ‚àÄ Œ≥ : Œì, A Œ≥
  nil := Unit
  snoc Œì A := (Œ≥ : Œì) √ó A Œ≥
  subTy A Œ¥ := A ‚àò Œ¥
  idSub Œì := id 
  compSub Œ¥ ŒΩ := Œ¥ ‚àò ŒΩ
  endSub _ := ()
  snocSub Œ¥ t Œ≥ := ‚ü®Œ¥ Œ≥, t Œ≥‚ü© 
  weaken Œ¥ Œ≥ := (Œ¥ Œ≥).1
  subX Œ¥ Œ≥ := (Œ¥ Œ≥).2
  subTm t Œ¥ Œ≥ := t (Œ¥ Œ≥)
  subTyId := by intros; rfl
  subTyComp := by intros; rfl

instance pi : PiType Type where 
  Pi A B Œ≥ := ‚àÄ x : (A Œ≥), B ‚ü®Œ≥, x‚ü©
  lambda t Œ≥ x := t ‚ü®Œ≥, x‚ü©
  apX t := Œª ‚ü®Œ≥, x‚ü© => t Œ≥ x
  PiŒ≤ := by intros; rfl
  PiŒ∑ := by intros; rfl

instance sigma : SigmaType Type where 
  Sigma A B Œ≥ := Œ£ x : (A Œ≥), B ‚ü®Œ≥, x‚ü©
  pair u v Œ≥ := ‚ü®u Œ≥, v Œ≥‚ü©
  proj‚ÇÄ t Œ≥ := (t Œ≥).1
  proj‚ÇÅ t Œ≥ := (t Œ≥).2
  SigmaŒ≤‚ÇÄ := by intros; rfl
  SigmaŒ≤‚ÇÅ := by intros; rfl
  SigmaŒ∑ := by intros; rfl

instance bool : BoolType Type where 
  ùîπ _ := Bool
  tt _ := true
  ff _ := false
  ifThenElse {Œì C} t u v Œ≥ := 
    @Bool.casesOn (Œª b => C ‚ü®Œ≥, b‚ü©) (t Œ≥) (v Œ≥) (u Œ≥)
  BoolŒ≤tt := by intros; rfl
  BoolŒ≤ff := by intros; rfl

instance prop : PropType Type where 
  PROP _ := Prop
  elP a Œ≥ := PLift (a Œ≥)
  irr := by 
    intros _ _ _ v
    show (Œª Œ≥ => ‚ü®(v Œ≥).1‚ü©) = v
    rfl
  subPROP := by intros; rfl
  subElP := by intros; rfl
  piP A b Œ≥ := ‚àÄ x : (A Œ≥), b ‚ü®Œ≥, x‚ü©
  lambdaP t Œ≥ := PLift.up (Œª x => (t ‚ü®Œ≥, x‚ü©).down)
  apXP t := Œª ‚ü®Œ≥, x‚ü© => PLift.up ((t Œ≥).down x)
  sigmaP a b Œ≥ := ‚àÉ x : (a Œ≥), b ‚ü®Œ≥, PLift.up x‚ü©
  pairP u v Œ≥ := ‚ü®(u Œ≥).down, (v Œ≥).down‚ü©
  proj‚ÇÄP t Œ≥ := PLift.up (t Œ≥).down.1
  proj‚ÇÅP t Œ≥ := PLift.up (t Œ≥).down.2
  top _ := True
  triv _ := PLift.up True.intro
  bottom _ := False
  exfalso t Œ≥ := False.elim (t Œ≥).down
  subBottom := by intros; rfl

end Model

def Model : Sig where
  Con := Type
  base := Model.base
  pi := Model.pi
  sigma := Model.sigma
  bool := Model.bool
  prop := Model.prop

#print axioms Model
